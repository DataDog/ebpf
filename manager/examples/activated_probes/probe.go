// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x3d\x68\x14\x41\x14\xfe\xe6\xce\xfc\xb8\x2a\x9e\x56\x71\x49\x71" +
	"\x8a\x85\x36\xab\x09\x22\x36\x42\x08\x98\x58\xa4\x08\x92\xc2\x42\x59\x2f\x97\x09\x59\x2e\xbb\x1b\x76\x37\xe1\x4c" +
	"\x04\x2b\x7f\x3a\x05\xb1\x14\xb1\xb7\x3f\xc1\x42\xb0\xb4\xb4\xb1\x4d\xa7\x60\x13\x1b\x4d\x21\x59\x79\x73\x33\xd9" +
	"\xc9\xec\x4e\x2e\x3e\xb8\xcc\xbc\xef\xcd\xf7\x7e\xe6\xbd\x9d\x3c\xbe\x35\x37\x53\x63\x0c\x4a\x18\xfe\xa0\xd0\x0a" +
	"\xb9\x3d\x54\xec\xa7\xe4\xdf\x06\x18\xc6\x18\xb0\x16\x07\x11\x21\xd9\x65\x07\x5b\xee\x4e\x4e\x7b\xc2\x97\xd3\xe6" +
	"\x0a\xed\xe3\xb8\xd3\xdc\x72\x7f\xec\xe3\x61\x67\x29\xa0\x7d\xd2\xbc\xb4\xb1\xe5\x6e\x0b\xfc\xd3\xbb\xbe\xef\x11" +
	"\x06\x6c\xe7\x79\xde\xab\x01\x63\x00\x9e\x00\x18\x06\xd0\x93\xb1\x5f\xcb\xb5\xc7\x80\xc8\x01\x3a\xee\xdf\x5c\xe9" +
	"\x71\x18\xc6\x6d\x77\x77\x3f\xce\x7a\x16\x84\xb4\xe7\xa9\xdf\x56\x79\xf5\x64\x71\xa9\xbb\x57\x8a\xbb\x23\xe3\x9e" +
	"\x3e\x24\x2e\xf9\xdd\x58\x4e\x7d\x51\xd7\x1a\x8f\x74\xbf\x0e\x28\x9f\x5d\xab\x5f\x67\x80\x5f\xde\x6d\xaf\xd2\x7e" +
	"\x7d\x89\x3b\xe5\x7c\xed\x7e\x8f\x1f\xe2\x97\xee\x9a\xee\x99\x7a\x41\x7d\xa0\x5e\x51\x9f\xe8\x6e\xe8\x5e\xe8\xce" +
	"\x22\x47\x94\x44\xe5\x38\x22\x09\x4a\x00\xb3\xf3\x73\x00\xf6\xf2\x3c\x7f\xfb\x93\x89\x5e\xe8\x22\xd2\xd2\x0d\xc7" +
	"\xb4\xdf\x28\x80\x46\x1f\x6e\xa8\xf3\x9b\x77\x30\xfa\xe8\x04\x3b\x89\x7e\x5f\x75\x7f\x5d\x6d\x3f\x0e\xe0\x9a\xc5" +
	"\xa6\xec\x0b\x9a\x7e\xb7\xc2\x9e\x1d\x62\xb7\xc9\x47\x91\xfa\xaf\xbc\xca\x56\x47\xbd\x92\x53\x17\xc5\x56\xe1\x43" +
	"\x16\x7c\xb8\x84\x3d\x05\x70\x46\x74\xb0\x2f\xca\xe3\x3d\x81\x3b\x25\xfc\x0d\x80\xb3\x9a\x1f\x55\xdf\xa6\xc0\x87" +
	"\x4a\xf8\xa4\xc0\x8b\x3c\xd5\x7d\x36\x04\x5e\x2f\xe1\xe3\x72\xa5\xfe\xd6\x00\xdc\xd0\xf4\xba\xe6\x97\xc9\x9c\xba" +
	"\x9a\x2e\xa2\x7b\x19\xef\x66\xf0\xa6\x17\x66\x3c\xda\x74\xd6\x92\x78\x91\xfb\x34\x5f\x62\x14\x25\x70\xc5\x04\xfc" +
	"\x03\x03\xa9\x4e\x1d\x04\xfd\x0d\x9e\xa4\x41\x61\x55\x43\x2b\x44\xf9\x21\x00\xfe\x6a\xd0\xe6\x51\xca\xe1\x25\x7c" +
	"\xd5\xe3\x2b\xfe\x72\xd2\x0a\xb9\x3a\x22\x47\x5c\xb9\x51\x6a\xd8\x0a\x22\xaf\x0d\x2f\xcd\x92\xac\xb5\x08\x2f\x7d" +
	"\x18\x8a\x75\x7a\x61\x06\x5e\x12\x2f\xb5\xb2\x16\xd9\x26\xbc\x89\xeb\x86\x5e\xd9\xed\xff\x93\xcf\xf2\x7e\x4d\x99" +
	"\x97\xad\xfb\x6d\xe0\xe6\x1b\xcd\xe4\xcf\x9c\xb0\x29\x4b\x3c\x73\x72\xcf\x0f\xe0\x9b\xdf\xe1\xa8\xa1\xcf\x5a\xf8" +
	"\x1f\x8e\xc8\xe7\x16\xfe\x55\x59\xa8\xf9\x1d\x9b\xfc\xf7\x16\xfe\xf3\x23\xf2\xbf\x49\xfe\xa4\x81\x6f\x4b\xbe\xf9" +
	"\xfe\xed\xbf\x6b\x72\xfd\x6e\xe1\xef\xca\x03\x17\x0c\x9c\x19\xeb\x33\xed\x1b\xd3\xc5\xad\xf5\x57\xb3\x5f\x66\xff" +
	"\xef\x5b\xf8\x4d\x0b\xdf\xd4\xbf\x56\xf8\x24\xb9\x28\xf9\xe7\x06\xc4\x1f\xb1\xf0\x6f\x4a\x7e\x73\x00\xff\x95\xf6" +
	"\xe6\xe8\xf2\x40\x02\x2f\x0d\xdc\xec\xdf\x0b\x40\x7b\x45\x0b\x69\xc8\x42\xd5\x1c\xd3\xff\xf6\x53\x1a\x5f\xf5\xf1" +
	"\x4b\x45\x6c\x92\x1d\x95\x3f\x2b\xf2\x1e\xd6\xf8\x6a\x2e\xfe\x05\x00\x00\xff\xff\x04\x64\x76\x46\x48\x09\x00\x00" +
	"")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2376,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1601902172, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
