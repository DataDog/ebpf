// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xc1\x6b\x13\x4f\x14\xfe\x26\x09\x4d\x7e\xf9\x29\x44\x4f\x75\xe9" +
	"\x61\x11\x84\xf6\xb2\xb5\x22\xe2\xb1\x14\x1a\x2f\x3d\x14\x29\x7a\x5c\x37\xe9\x84\x2c\xd9\xec\x86\xdd\x69\x48\x8d" +
	"\xe2\xa9\x47\x2f\x82\x67\xd1\xbf\xc0\x8b\xc4\x83\x60\xff\x84\x1e\xeb\xad\x47\xc1\x8b\x82\xe0\xcd\x95\x37\x99\x75" +
	"\x27\x93\xac\xe9\x07\xdb\x79\xf3\xcd\xbc\xf9\xbe\xf7\x66\xbb\x79\xb1\xbb\xd7\x2c\x31\x86\x0c\x0c\xbf\x90\xcf\x72" +
	"\x9c\x97\xf3\x78\x5b\xfd\xbd\x0a\x86\x55\x06\x0c\x22\x3f\x24\x46\x6c\xd4\x31\xb6\xbe\xa7\x14\x13\xdf\x49\xec\x2e" +
	"\xc5\x51\xd4\xb3\xc7\xd6\xd7\xbf\x7c\xbf\x77\xe8\x53\x1c\xdb\xeb\xc3\xb1\x75\x21\xf9\xcf\x6f\xa7\x67\x57\x19\x70" +
	"\x91\xa6\xe9\xa4\x04\xac\x02\x38\x01\xb0\x02\x60\xa2\xb4\x5f\xab\x71\xc2\x80\x50\x6c\xd4\xdb\x9a\x5e\x37\x8a\x7a" +
	"\x14\xdb\x83\xc8\xd7\xf5\x92\xe3\xa4\x4d\xb1\x17\x04\x76\xa6\x47\x7c\xcc\xc5\x91\xf4\x11\xda\xeb\x63\xeb\x7c\xde" +
	"\x9f\x27\xec\xb1\x75\x96\x66\x7a\x84\xc4\xfa\x39\xe7\xf7\x4c\xf9\xbd\xf5\x0f\xbf\x19\xe8\x6c\xaa\x9b\x7a\x43\x7d" +
	"\xa1\xde\x51\xdf\x66\xd6\x3d\x61\x93\x37\xf2\x45\xde\xc9\xf7\xcc\xe6\x07\xfb\x7b\xb4\xf7\x77\x9a\xa6\x6f\xbe\x31" +
	"\xd9\x27\x1d\xd2\xaa\xbe\x50\xd1\x9e\x1a\x80\x46\xbe\x37\x0b\xd9\xd3\x87\xa8\x3d\xfb\x9f\x5d\xc1\xb4\xef\xfa\x99" +
	"\x23\x2d\x5e\x03\x70\x57\x9b\xbf\xc7\xe5\x30\x94\xf2\x3f\xd2\x45\x6b\x65\x94\x17\xe6\x94\xa5\xe1\x59\xb8\x00\xae" +
	"\xc9\x0e\xe7\xa5\x11\x1e\x49\xbe\x3a\xc7\x93\xd7\xeb\xda\xf9\x59\x2d\x37\x25\x5f\x99\xab\x63\x4d\x8d\xd4\xc3\x12" +
	"\x80\xfb\xda\x5c\x9e\xe2\x08\x3e\x12\x70\x76\x0e\x9a\x0e\x05\xbd\x98\x8b\x41\x1c\xb5\xf8\xa6\xba\xb9\x29\x13\xb5" +
	"\xb8\x7b\x14\x06\x7e\xd8\x23\x46\x6e\x70\x87\x9d\xc4\x95\x9b\x14\xb1\x99\x13\xee\x90\xc7\x89\x1f\x85\x70\x03\xbf" +
	"\xcd\xc3\x84\xc3\x89\x79\xe0\xf0\xae\xdb\x89\xbd\x3e\x47\xdf\xf3\x43\xa7\x0d\x27\x11\xb1\xf0\x5a\x70\x92\xe3\xbe" +
	"\x1c\x77\x0e\x9a\x70\xe2\xe8\xd0\x13\x1e\xad\x6d\x39\x5b\xf7\x96\xde\xc4\xe5\xf0\x3c\xab\xd7\xc0\x6d\x45\xbe\x33" +
	"\x78\xf3\x9b\xc1\xd4\xb3\x62\xf0\xdb\x05\x7a\xe6\x4d\xef\x2e\xc9\x1f\x19\x7c\xcd\x98\x37\x0a\xf2\x3f\xaa\xd1\x7c" +
	"\x6f\xcd\xfc\x57\x2a\xff\x8e\xc1\x0f\x58\xee\xcf\xd4\x83\xd6\x87\x27\xfa\x3b\xa3\xe1\x83\xda\x60\xd6\x6b\xf6\xef" +
	"\x71\x41\xfe\xa7\x82\x7c\x73\xfe\x72\xc1\x99\x84\x53\x45\xde\x58\xa2\x5f\x2d\xc8\xff\xa2\x48\x7b\x49\x7e\xa0\xfd" +
	"\x0f\xcd\x40\x11\xfb\x06\x6d\xf6\x9f\x7e\x38\xfe\x5b\xa0\xdf\x28\xcf\xea\xd3\xf7\xaa\xae\xe5\x67\xf7\x70\xb2\x48" +
	"\x9b\x74\x15\x79\xaa\xf9\xae\x68\xf9\xd9\x77\xef\x4f\x00\x00\x00\xff\xff\x18\xca\xe3\x99\x18\x07\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1816,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594301024, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
