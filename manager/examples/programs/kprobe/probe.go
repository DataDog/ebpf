// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xbf\x6f\xd3\x40\x14\xfe\x9c\xf4\x17\x01\x54\x60\x2a\x56\x07\x2f" +
	"\x95\x5a\x21\xb9\x2d\xaa\x50\x07\x86\x2e\x85\xa5\x48\x08\x31\xb0\x59\x8e\x7b\x55\x2d\xc7\x76\x64\x5f\x4b\x4a\x90" +
	"\x80\x81\x81\x81\x11\xb1\xa1\xb2\x30\xa2\x6e\x61\x82\xbf\x00\x29\x23\x63\x46\xc6\x20\x21\xc1\x80\x6a\xf4\x9c\xbb" +
	"\xe4\x72\x8e\x69\x79\x52\x72\xef\x7d\x77\xdf\xbd\x9f\xbe\x67\xdb\x3b\x77\x2a\x86\x01\x29\x06\x7e\x61\x64\x8d\xe4" +
	"\x78\x6a\xa4\x6f\x89\xff\xcb\x30\xb0\x60\x00\xcd\xd8\x8f\x08\xe1\x2b\x35\xb4\xcd\x7e\x46\x3a\xe1\x7b\xa9\xb5\x4f" +
	"\x7a\x1c\x07\x56\xdb\xfc\x3e\xc4\xc3\x60\xd7\x27\x3d\xb1\x96\x0f\xdb\x66\x2f\xc7\xbf\xbc\x1f\xdc\x3d\x6b\x00\xbd" +
	"\x2c\xcb\x3a\x15\x60\x01\xc0\x4b\x00\x33\x00\x3a\xc2\xf7\x1b\xb1\x76\x0c\x20\xaa\x01\x81\xf9\x27\x93\x76\x1c\x86" +
	"\xb1\x67\xfe\x1e\xfa\x39\xe0\x7e\x48\x3a\x4b\x1d\x4f\xc6\xd5\x11\xc9\xa5\xe6\x69\xc1\x6f\x5f\xf8\x9d\x3f\xcb\x2f" +
	"\x5f\xa9\x79\x4a\x9e\xfb\x71\x1c\x90\x6e\x35\x63\x5f\xcd\x33\x3d\x4a\x3d\xd2\xdd\x46\xc3\x92\x79\x12\x9e\x30\x7e" +
	"\x90\xe7\x1f\x59\xcb\x6d\xf3\x5b\xb1\x2e\x2e\xb7\xda\x66\x57\x8b\xf7\x67\x21\xde\xae\x88\x77\xe9\x1f\xf1\xd2\x9d" +
	"\x54\x67\xea\x05\xf5\x81\x7a\x45\x7d\x82\xba\xef\x72\x8b\x62\xa2\x78\x28\x66\x8a\x77\xec\x30\x15\x92\x8a\x48\x05" +
	"\x8e\x6a\xb8\x7b\x7f\x07\xa7\x59\x96\xc7\x73\x45\xce\xcd\x93\x07\x98\x7b\x7a\xd1\xb8\x84\x41\xdf\x16\x94\xd9\x69" +
	"\x29\xfa\x22\x80\x8d\x92\x3d\xb9\xff\x50\xb1\x4f\x70\x3e\x79\x0b\x60\x0a\x3f\xb2\x49\x7b\x55\x54\x27\x72\xaa\x98" +
	"\x2a\xc1\xa7\x0b\xd8\x73\x00\x57\x31\x37\xb4\x25\xf3\x71\x8e\x5f\x28\xe0\xf7\x00\x5c\x53\xee\x97\x79\xde\xc8\xf1" +
	"\x6a\x01\xbf\x9e\xe3\x23\xbf\x32\xef\x45\xb1\xd2\x18\x54\x00\x6c\x2a\x36\xdd\xf2\x48\xb1\x73\x6f\x36\x67\x2d\x8e" +
	"\x20\x61\xbc\x99\xc4\x75\xb6\x2a\x1a\x3c\x40\xe2\x3a\x73\x0e\xa2\x86\x1f\x05\x84\xe4\x07\x9c\xc3\xbd\xd4\xc9\x0f" +
	"\x09\x60\x55\x07\x9c\xb1\xf6\xcb\x53\xe3\xa0\x73\xc8\x92\xd4\x27\xa5\xe1\x7b\x2c\x4a\x19\xec\x84\x35\x6c\xb6\xef" +
	"\xec\x25\x6e\xc8\x10\xba\x7e\x64\x7b\xb0\x53\x9e\x70\xb7\x0e\x3b\x3d\x0a\xf3\x35\x89\x77\x5d\xee\x12\xbc\x6e\xaf" +
	"\xdf\xd2\xec\x89\xcd\xf9\x4f\x79\x27\xea\xa4\x4b\x57\x80\x5f\x35\x5c\x7f\xfb\x0c\xf1\x9b\xd1\xf0\xad\x12\x7f\xfa" +
	"\x44\xdd\x3e\x83\xaf\xcf\xff\x9c\x66\xd7\x4b\xf8\x9f\xce\xc9\x9f\x2d\xe1\xaf\x89\x44\xf5\xef\x4b\xe7\x7f\x14\xfc" +
	"\x9b\x1a\xde\x13\xfc\x6d\x0d\x1f\xbe\x07\x62\xfd\x5c\xc2\x5f\xaa\x0c\xd6\x79\x0d\x37\xb4\xf5\x85\x32\xeb\xaa\x6c" +
	"\x08\xbe\x5e\x6f\xbd\x7f\xad\x12\xfe\x66\x09\x5f\xb7\x5f\x2b\xdf\x9e\x2a\x5b\x02\x68\x6a\xb8\x5e\xbf\x57\x80\xf2" +
	"\x3a\x8c\xe4\x58\x04\xb4\x26\x6c\x7a\x37\x6b\x0a\x5f\xd6\xf1\xc3\x04\xdf\x24\x27\x02\xec\x0b\x9b\x62\x9c\x56\xf8" +
	"\xf2\xfd\xfd\x1b\x00\x00\xff\xff\x63\x1b\xca\xb0\xe0\x07\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2016,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1619013892, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
