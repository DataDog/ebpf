// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xbd\x6f\xd3\x5e\x14\x3d\x4e\xd2\xa4\xbf\xb4\xd2\x0f\x18\x50\xf5" +
	"\xd4\xc1\x4b\xa5\x56\x02\x43\xf9\xa8\x2a\x06\x54\xb5\x02\x96\x0c\x15\xea\xc0\x82\x82\x71\x5f\x8b\xd5\xc4\xa9\xfc" +
	"\x5c\x3e\xe2\x4a\x2c\xf0\x1f\xc0\xc4\x02\xea\x3f\x90\x2d\x6c\x65\x83\xb1\x63\xc7\x8e\x8c\x01\x21\xd1\x01\x61\x74" +
	"\x5f\xae\x13\xeb\x25\xa6\xe2\x4a\xc9\x7d\xf7\xf8\x9d\xfb\x71\xde\xb3\x5f\xde\xa9\xdd\x2d\x58\x16\x52\xb3\xf0\x13" +
	"\xc3\x68\x68\xa7\xa5\xe1\x7a\x85\xff\xa7\x60\xe1\xf0\x62\x1f\xeb\x56\xfa\x7e\xa7\xfd\x2b\x21\xef\xb5\x4f\xb5\x8f" +
	"\xdb\x3d\xed\x0f\x0f\xfa\xcf\x2b\x45\xe0\x7b\x92\x24\xdd\x02\xf3\x4a\x40\x19\xc0\x6b\x00\x02\xc0\x36\x00\x1b\xc0" +
	"\x67\xf6\xcd\xca\xff\x30\xf9\xa7\x49\x92\x1c\xba\xcc\x2f\xf4\xf9\x67\xe7\x29\x8f\xe4\xe9\x19\x79\xa6\x39\x4f\x21" +
	"\x93\x67\xc6\x02\xbc\x56\xe3\x16\xed\xb1\xe7\x36\xab\xb1\x38\xd6\xf3\x10\xbe\xb6\x60\xef\xd2\x3a\x6c\x45\xad\x58" +
	"\x1c\x0d\xf0\xed\x50\x2a\x5a\x2b\x7b\x7e\x23\x16\x5f\x06\x78\x28\x37\xa9\x15\xb4\x02\x5b\xc6\xe2\xd3\x00\x97\x91" +
	"\xed\xd1\xda\xdd\x8d\xf6\x62\xf1\x71\x80\x07\xf2\x99\xde\xbf\xeb\x7a\x3b\xb1\xe8\x68\x5c\xb5\x4f\xb4\xf7\x0f\x58" +
	"\xd7\x0f\x3c\x8f\x05\x74\x58\xd7\x45\xee\x5f\xeb\xc2\x67\xf6\x96\x7d\xd7\x02\x36\xd6\x16\xaa\x9e\xe8\x0d\xeb\x6c" +
	"\x87\x52\xe7\x56\xf6\x7c\x2c\xbe\x8e\xeb\xd7\x8f\xc5\x49\x4e\xbf\xc7\x39\xfd\xf6\xf5\xe8\xf2\x65\x52\xe2\xc7\x48" +
	"\xbf\x47\xdc\xef\xdc\x5f\xfa\xa5\x9c\x94\x8f\x6a\x52\x3d\xea\x89\xf4\x23\x8d\x49\x5f\x3a\x03\xd2\x9f\xce\x88\xce" +
	"\xc7\xbc\xb7\x39\x7c\x3f\x18\x26\xa8\xe2\xde\x7a\x8d\xf6\xfe\x4e\x92\xe4\x5c\xfa\x1e\xb4\xef\x63\x72\x7f\xca\xa2" +
	"\x3b\x31\xc3\xbf\xd4\x3a\x99\x17\x64\x16\xc0\x8d\xec\x33\xb3\x81\x1c\x6b\x02\x28\xe1\x5b\x62\xe2\x6f\xf4\x7f\x11" +
	"\x27\x63\x38\x45\x14\xc7\xe6\x2a\xa2\x34\x82\xdd\x04\x70\x1e\xe5\x41\x9c\xee\xb8\xa4\xf1\xca\x08\xfe\x10\xc0\x85" +
	"\x4c\xfe\x74\xc6\x9a\xc6\x87\xf9\xd3\xf9\x66\xd9\x5b\xba\x3e\xb0\x9c\x89\xf5\x6e\x27\x92\xcf\x23\x78\x0d\x57\x29" +
	"\x7f\xcb\x97\xe1\x15\x96\x3c\x0b\xf5\x4f\x11\xf5\xa7\x32\x54\x7e\x2b\x40\xbd\xe1\x7b\x32\x50\x12\x4e\x28\x1b\x8e" +
	"\x7c\x52\xdf\x0a\xdd\xa6\x04\x33\xeb\x5e\x43\xd5\xb7\xf6\x02\x0f\xd2\x88\x9b\xae\x1f\x38\x1e\x1c\x15\x85\x91\xfb" +
	"\x18\x8e\x7a\xd1\xd4\x3e\x6c\x6d\xba\x91\x4b\xf0\xa2\xb3\xb8\x84\xda\xea\xea\xd5\xfa\xf5\xb1\x12\xfe\xb3\x45\x3c" +
	"\xb7\x69\x0f\x58\xaa\x77\x06\x6e\x7e\x53\x2d\xfe\x95\x0d\x7c\x25\xa7\x9e\x79\xc2\xe2\x0c\x7e\xc7\x28\x38\x69\xec" +
	"\xab\xe4\xf0\x7b\xcc\x33\xef\xb1\xc9\x7f\xc5\xfc\x6b\x06\xfe\x9e\xbf\xeb\xd2\xc0\x07\xef\x15\xfb\xa5\xcc\xdd\xc9" +
	"\xda\x04\x03\xe6\xbc\xa6\x7e\x97\x73\xf8\xd3\x39\x7c\x33\x5e\x65\x7e\xc1\xec\x93\xf9\xeb\x06\x6e\xce\x7f\x1b\xc0" +
	"\x7f\x18\xb5\x65\x2e\x64\x73\x5c\x65\x6e\xca\x4f\x75\xd8\x1f\x53\x9b\xec\x11\xd7\x3f\xe6\x98\x7a\x9c\xc8\xf0\xd3" +
	"\xef\xd0\x9f\x00\x00\x00\xff\xff\xb7\x39\x2e\xe1\xb8\x07\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1976,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1612443299, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
