// Code generated by go-bindata.
// sources:
// ebpf/bin/probe.o
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _probeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x3d\x68\x14\x41\x14\x7e\x7b\x3f\xc9\xe5\x22\x72\x11\x8b\xe4\xb8\x62\x10\x02\x89\xc8\x26\x7b\x51\xb1\x0c\x07\x26\x85\x29\x82\x44\x10\x2d\xce\xcd\xed\x9a\x2c\x77\xbb\x77\xec\x2e\x62\x72\x82\x58\x58\x58\x5a\x68\x2b\xfe\x20\x36\x82\x82\x70\xda\x98\x58\x08\x29\x52\x9c\x8d\xa4\xb4\x11\x04\x2d\xb4\x32\x45\x70\xe5\xcd\xce\xde\xce\xcd\xed\xe6\x92\x3e\x03\xb7\xb3\xef\x9b\xf7\xe6\xcd\xfb\xe6\xbd\xb7\x77\xf7\xe2\xc2\x5c\x42\x92\x20\x18\x12\xfc\x85\x50\x0a\x47\x7b\x28\x7c\x9f\x65\xcf\x11\x90\xa0\x25\x01\xd5\xaf\xe4\xf7\x3c\x44\x37\x9e\xf9\x3a\x83\x09\x80\x3d\xcf\xf3\x46\x85\xcd\xee\x83\xaf\x7f\x05\x72\x54\x6e\xb1\x75\x27\xff\x83\xda\xa3\xbe\x43\x74\x13\xdf\x1b\xee\x5a\xb6\x99\xff\xd6\xc1\x27\x89\xa9\x52\x5c\x21\x46\x33\xbf\xd3\xc1\x27\xcc\xaa\x86\xef\x86\xad\xba\xcd\x7c\xdb\x3f\xc7\x53\x76\x0e\x09\xa0\xed\x79\x5e\x2b\x01\x30\xc6\xfc\x0f\x00\x40\x1a\x4e\x76\xfc\x67\x01\xa0\x9a\xff\xdd\xd9\x6f\x5c\x23\xd4\x8f\x4b\xc6\xb5\x26\x77\xae\xba\xe5\x52\xdc\xb0\x1c\x12\x73\xae\x4a\xbf\x73\xa9\x49\xff\x5c\xea\x8b\xbd\xd8\x73\x9e\xe2\xce\xd9\x62\xbc\x3d\x62\xb3\xc8\x37\xca\xa7\xa9\xbc\x7b\x48\xfe\x89\x10\x7f\x18\x27\x31\x2c\xba\x68\xaa\x0d\x85\x8f\xb3\x9b\x97\x30\x4e\x47\xb7\x5d\x9f\x97\x15\x12\xc4\x49\xf7\xb1\x75\x8a\x4f\x12\xc3\x6a\xe6\xb7\x62\x78\xd9\xf4\xe2\xf8\xd8\x64\x7c\x60\x7c\xad\xa4\x3f\x07\xbc\x88\x71\x6e\x3c\x67\x72\x12\x60\x37\x22\xee\x56\x2a\x8c\x3f\x41\xef\x7f\x54\xc8\xbf\xf0\xfe\x57\x88\x5b\xc7\x77\xa2\xd5\xb3\xfc\xfd\x9f\x21\x16\xc5\xdd\x55\x8c\x27\xe4\x45\x5b\x23\x34\xce\x55\xdd\xd6\x79\x5e\x5c\xd5\xe7\xab\x66\xeb\x6a\x34\x2f\x9a\xda\x8f\x97\x28\x3e\x94\x7d\xf2\x03\xc3\x49\xb1\x5f\x16\x8e\x06\x3f\x8e\xb8\xe9\x3f\x30\x07\x31\xff\xb0\xa7\x61\x9f\xc5\x5e\x8c\x7d\x38\x66\xbd\x82\x3d\x11\xfb\x21\xf6\x06\xec\x0b\x22\xaf\x81\x3e\xe6\x3c\xf6\x01\xec\x15\xd8\x27\x02\x7d\xec\x35\xb8\x53\x36\x52\x5f\x53\xb1\x86\xb0\x7e\xb0\xc6\xb0\xbe\xb0\x06\xb1\xfe\xb0\x46\xb1\x3e\x61\x7e\x71\x01\xed\xfe\x79\x9e\xf7\xe4\xa7\xc4\xaa\x3a\x1c\xb4\xbc\xf9\x85\x14\xf7\xcb\x00\xb0\xcf\x50\x30\x81\xb4\x7e\x19\x32\x77\x86\xa5\x63\x58\x93\xec\x17\x8c\x06\xd7\x53\x0a\x00\x70\x96\x5b\x23\x89\x83\xf1\xbb\x4e\x5d\xff\xf1\x44\xfc\x33\x7d\x26\x61\x53\xc0\x5f\x33\xfc\x86\xd0\xcf\x3e\xd2\x67\x1a\x16\x05\xfc\x25\xc3\x73\x11\xe7\x49\x42\x32\xf2\x4c\x49\x48\xf7\x60\x15\x00\x18\xe1\xaa\x84\xb5\x4f\xb8\x46\xf1\xe1\x1e\x1c\xbf\x59\x27\xb8\xfd\x03\xae\x72\x14\x0f\xf7\x0f\x78\xfa\x42\xf7\x19\xec\xe0\x05\xa6\xff\x81\xe2\x99\x1e\x9c\x30\x19\x45\xbc\x9b\x69\x41\x9e\x90\xba\xe5\x02\xb7\x8e\x7d\xf2\x02\x27\x53\xaf\xb2\xab\xdf\x76\x41\x2e\x2d\xcd\xc9\xf8\x52\xb5\x75\xb7\x61\xd7\x97\xf5\x32\x4b\x40\xa8\x76\x8b\xb2\xad\xd7\x3a\x4a\x53\x5d\x68\x37\x54\xbe\xa5\xdb\x8e\x51\xb7\xa0\x5c\x33\x2a\xba\xe5\xe8\x54\x49\xd6\x57\xcb\x37\x6d\xd5\xd4\xc1\x54\x0d\x4b\xae\x80\xec\xb8\xb6\xab\x2e\x83\xec\xac\x99\x74\x2e\x2d\xcd\x81\x6c\xd7\x31\xe5\x71\x4d\x91\x95\xf3\xb0\x50\x2a\x29\xe5\x19\x9c\xa6\xcb\x33\xf8\x3d\x76\xa6\x4c\xb5\x51\xf4\xf1\xa2\x8f\x17\x3b\xb8\x12\x79\xbb\x87\x1b\xf7\x68\x3e\xf4\x8e\x5d\x76\x25\x5f\x05\x5c\xfc\xaf\x28\x71\x9c\xf3\x63\x36\xc6\x5f\x4a\x90\x2f\xf5\xb1\x6f\x08\x0e\x33\x82\xde\x3c\x00\x0c\x45\xf8\x79\xc5\x14\x83\x3a\xcf\xb1\x38\x33\xd0\x8d\x9f\x8b\xf1\xff\x26\xc8\xc3\xc4\xfe\xfe\x95\x18\xff\xef\x99\x22\xe1\xfc\xa5\x23\xfc\x6f\x33\xff\xe2\x1d\xb4\x19\x50\x10\xe2\x17\xf9\x7b\x17\x63\xff\x2b\x75\x30\xfb\xc7\xcc\xbe\x28\xe0\x39\x46\xc8\x5b\x11\x67\x73\xb0\xad\x16\xe3\xff\xd3\x40\xb4\x3f\x31\x7f\xae\xc7\xd8\x6f\xc5\xd8\x8b\xf2\xc3\x88\x3d\x71\x6c\x33\xfb\xb1\x3e\xfe\x07\x63\xec\xbf\x33\x7b\xd2\xc7\xbe\xc1\x30\xb1\xfd\x66\x58\xab\x5b\x14\x71\x41\xae\xc5\xe4\xcf\x4e\x44\xfe\x1c\x8f\xc8\x9f\x07\x11\xbe\x71\x5c\x0d\xfc\x73\x7d\x32\xc3\xd9\x07\xdf\xb9\xff\x01\x00\x00\xff\xff\xb4\x43\x30\xd3\x10\x0e\x00\x00")

func probeOBytes() ([]byte, error) {
	return bindataRead(
		_probeO,
		"probe.o",
	)
}

func probeO() (*asset, error) {
	bytes, err := probeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "probe.o", size: 3600, mode: os.FileMode(420), modTime: time.Unix(1592915206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"probe.o": probeO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"probe.o": &bintree{probeO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

