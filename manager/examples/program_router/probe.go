// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeo = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x3d\x6c\x13\x49\x14\xfe\x36\x76\x12\x5f\xee\x94\xcb\x9d\x4e\x27" +
	"\xdf\xca\xc5\x4a\x57\x5c\x7c\x48\x1b\x25\x42\x08\x89\x26\x24\x10\x24\x48\x11\x81\x5b\x64\x6d\x36\x93\xb0\xca\xda" +
	"\x6b\xad\xc7\x84\xc4\x48\x44\x42\x48\x51\xe8\x90\x68\x68\x22\x3a\x3a\xe8\x4c\x17\x4a\x4a\x97\x2e\x29\x91\x68\xa0" +
	"\x02\x51\xb0\xe8\x8d\x67\xb3\xb3\x93\x5d\x0c\x3d\x4f\x5a\x98\xf9\xe6\xbd\x79\x7f\xdf\x1b\xe7\xde\xe5\xd5\x95\x31" +
	"\xc3\x40\x2c\x06\x3e\x22\xd9\x25\x72\x30\x91\xac\x17\xe5\xbf\xbf\xc3\xc0\xf1\xdf\x43\xac\x67\x00\xd5\x29\x60\xdb" +
	"\xfc\x14\xd1\xbe\x6c\x00\x9d\x90\x6d\xd0\xda\x9a\xad\x2d\x77\xcd\xf7\x27\xf8\x36\xe3\x16\xad\x5d\xa7\xc5\xbb\xe6" +
	"\xdb\x13\xdc\x6a\xb2\x1d\xa1\xdf\x72\xdc\xae\xf9\x26\x8a\xef\x25\x69\x9b\x9f\x87\x7a\x93\x80\xc7\xc2\x39\x5a\x07" +
	"\x4d\x56\xed\xee\x0d\x86\x78\x09\x98\x75\x7d\x47\xe8\xb6\xbd\xcd\xee\x61\x5f\xe0\xc7\x4f\x87\xf6\x93\x06\xd0\x8f" +
	"\xa2\xa8\x37\x06\x9c\x01\xf0\x00\x00\xa5\x74\xec\x0c\xcf\xcb\x63\xe9\x7c\x7b\x05\x88\x3a\x90\xde\x6f\x32\x8e\x29" +
	"\xa4\xf3\x73\x7c\x5f\xe4\x31\x5b\x5b\xae\xaa\xf9\x71\x8b\x8b\x5b\x3d\xdf\x72\x53\xf9\xb9\x41\x87\xd6\xfe\x46\xf3" +
	"\xbf\x38\xbf\x38\xfe\x6f\xc5\xfb\xbf\x12\x6f\x4f\xc6\xf7\x18\xf9\x75\x67\x39\x75\xf7\x7d\x8b\xd3\x3a\xf4\xb6\xb6" +
	"\x52\x71\x71\xc7\x13\x71\x59\xae\x13\xc7\x45\x78\x5c\x67\xbe\x13\x54\xbb\xe6\xe0\x04\x4f\xd5\xd9\xec\x67\xf6\x69" +
	"\x54\xdd\xf5\x3c\x0a\x00\x8a\xf2\x2b\x64\xf0\xef\xa7\x0c\x85\x6a\x4f\x75\xa7\xde\x10\xff\x69\x66\x68\x5e\x68\xa6" +
	"\x68\x9e\x68\xe6\xa8\xef\xc4\x89\x4c\x7d\x37\xe8\x10\xff\x88\xa3\xc4\x4f\xe2\xb0\xa2\x9e\xd2\xa7\xbe\x2b\x6a\x9c" +
	"\x78\xc3\x92\xfb\xaf\xac\xad\x02\x5f\xa2\x28\x3a\x7a\x67\xa0\xac\xc5\x29\xe8\xa0\x1e\x14\x95\xaf\x04\x60\x66\x08" +
	"\xcf\xc4\xfa\x7b\xd7\x51\xba\xfb\xab\x41\xb3\x56\x96\x5f\x2c\xfb\xca\x83\x54\x01\x70\x56\x39\x7b\xfd\x9d\x75\xbb" +
	"\x2f\x5c\x7f\x88\xb2\xce\x0a\x39\x8c\x2b\x60\xfc\x14\x76\x15\xc0\x1f\x22\x81\x24\x2d\x92\x8b\x02\xff\xe5\x14\x7e" +
	"\x03\xc0\x9f\xca\xfd\x71\x2e\xff\x0a\x7c\xfc\x54\x1e\x13\xe2\x9e\xe4\xb1\xad\x18\xe9\x73\x43\x96\xaf\xa2\xec\xe9" +
	"\xe9\x3a\xaf\xec\x85\xb7\x86\xd3\x6a\xcf\x71\xb7\xde\x0a\x83\xad\xba\x13\x86\xce\x2e\x6c\xce\xee\x70\xd8\x4b\xb5" +
	"\x15\x9b\x16\x49\xa7\xeb\x7c\x27\x40\xba\xf1\xa8\xdf\x66\x61\xdb\x0b\x9a\xa8\xfb\x9e\xcb\x9a\x6d\xa6\xea\x07\x4d" +
	"\x06\x3b\x64\x7e\x9a\x5c\x02\xb2\xd9\xad\xfa\x66\xe8\x34\x18\x1a\x8e\xd7\xb4\x5d\xd8\x6d\x1e\x72\x67\x1d\x76\x7b" +
	"\xb7\x21\xfe\x5f\xaa\xad\xc0\x0e\x83\x0d\x87\x3b\x74\x36\x6f\xcf\x9f\xcb\x2c\xff\x0f\xc9\x61\xce\xbb\x31\x90\x25" +
	"\x7e\xae\xe1\xfa\x6f\xdc\x5f\x12\x9b\xd0\xf0\xc5\x1c\x7f\x45\x6d\xbf\x39\xc2\x7e\x5f\x73\x58\xd2\xf4\xd6\x01\x85" +
	"\x3d\x89\x3c\x93\xf1\xc7\x73\x32\x2d\xf3\x8c\xed\x63\x7c\x21\xc7\xff\x2b\x8d\x3f\x79\xfe\x0d\x95\x3b\x8a\x1c\xc8" +
	"\xdf\xc5\x8a\x16\xbf\x9e\xff\x91\xb4\x5f\xd0\xf0\x17\xf2\xc2\x87\x1a\x3e\xa3\xf8\x25\xb9\x96\xe3\xff\x42\x31\xdb" +
	"\x9f\xde\xbf\xa5\x1c\xfb\xc5\x1c\x7b\x7d\xff\x24\xe3\x4e\x92\x4b\x52\xf1\x9f\x11\xfe\xcd\x1c\xfb\x9b\xd2\xde\x1a" +
	"\x61\xbf\xab\xcc\xb2\x2a\xfb\xd2\x7e\x4d\xc3\xf5\xfe\x75\x72\xf8\xf3\x72\x3c\xed\x7f\x5a\xfe\x3d\xa3\xf3\xe7\x51" +
	"\x86\x6f\x92\xbe\xf4\x3f\x50\xe2\x2e\x2a\xf6\xf1\x3b\xfd\x35\x00\x00\xff\xff\x92\xbe\x02\x72\x48\x0a\x00\x00")

func bindataProbeoBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeo,
		"/probe.o",
	)
}



func bindataProbeo() (*asset, error) {
	bytes, err := bindataProbeoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 2632,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1594297982, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
