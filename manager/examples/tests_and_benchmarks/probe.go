// Code generated by go-bindata.
// sources:
// ebpf/bin/probe.o
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _probeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xbf\x6f\xd3\x40\x14\xfe\xce\x49\x1a\xd3\x42\x54\x2a\x06\x88\x32\x64\x81\xf1\xfa\x43\x48\x20\xb1\x54\x91\x5a\x96\x0c\x08\x85\x0d\x64\xb9\xa9\x4b\x22\x12\xa7\xb2\x0d\xa4\x80\xd4\xa9\xfc\x07\x9d\x11\x4c\x8c\xdd\x32\xc2\x9f\xc0\xd8\x3f\xa1\x12\x4b\x91\x90\x60\xa8\x38\xf4\xce\xcf\xb5\x7b\xb1\x09\xec\x3c\x29\x7e\xf7\xbe\xbb\xef\x7b\x77\xef\xd9\x97\xfd\x8d\xf6\xa6\x25\x04\x12\x13\xf8\x81\x34\x4a\xad\x57\x4e\xc7\xeb\xfc\xac\x41\x60\x22\xa0\xd7\x77\xeb\x67\x8a\xd0\x4f\x1f\xe2\x35\x55\x0b\x38\x53\x4a\x5d\x37\xc4\x0e\x10\xaf\x7f\x84\x9a\x8e\x89\x3f\x0f\xe0\x59\xfd\xbb\x4a\xe2\x6d\x37\x72\xbb\xf5\x53\x1d\x13\xdf\x1f\x35\x23\x1a\x7b\x61\xd4\x7c\x5d\x3f\x89\xf3\xbc\xe7\x3c\x02\x38\x51\x4a\x4d\x2c\x68\x45\xd2\x9f\x23\x1e\x00\xa5\x94\x4a\xf2\x56\x60\x6b\xef\x8a\xf8\x20\xae\x15\xe3\x4f\xad\x78\x3f\xe4\x9b\x00\x5e\xb2\x9f\x30\xff\xc9\x52\x7c\x80\x09\xeb\x1c\xb2\x27\x3a\x29\xd9\x3c\xfe\x6f\xa9\x51\xbf\xa8\x57\xd4\xc7\x79\xdc\x7f\xd0\x06\xf0\x4b\x29\xf5\xee\xab\xd0\x7d\xc9\x9a\xae\x6e\x76\xa2\x9c\xf9\x51\x71\x17\x63\x78\x31\x59\xff\xea\x21\xec\x37\x0b\xe2\x32\xf7\x38\xab\xf7\xf3\x2f\xf6\xb6\xa1\xa5\xbf\x29\x13\xdf\xd7\xcf\x12\x8e\x0c\x7c\xcc\xf8\x69\x8e\x56\x09\xa5\x29\x4c\x02\xb8\x8a\xea\x79\x9c\x7c\x36\x37\x35\x6e\x4f\xe1\xb4\xff\xa5\x8c\x4e\x72\x06\x57\xaf\xaf\x9c\xe3\x0d\xfe\x8e\x9a\x1c\x0b\x2e\x4f\x23\x13\x6b\x4d\x19\x79\xe3\x08\xb2\xd5\xd9\x94\x7a\x10\x78\x83\xf1\xf6\xee\xf2\x70\xcf\xd9\x79\xee\x77\x1d\x6a\x0c\x9c\x17\x5e\x10\xf6\x47\x3e\x9c\x41\xbf\xeb\xf9\xa1\xa7\x97\x49\xaf\xe7\xec\x04\xee\xd0\xc3\xd0\xed\xfb\xb2\x0b\x19\x46\x41\xe4\x6e\x41\x86\x7b\x43\xf2\x43\x77\x37\xbc\x20\xe4\x50\x87\x75\x2e\xb4\x5b\xad\x15\xe7\x76\xec\xd6\x20\x83\x11\x4d\x91\xc0\xaa\x5c\x2d\xea\xc5\xbf\x58\x5b\xd7\x7b\xda\xbe\x30\x78\x68\xe0\xe6\x1d\x26\xf8\x37\x67\xe0\xeb\x05\xf9\xca\x46\x7c\x6d\x06\xdf\x7c\xf7\x6c\x23\xa6\xf7\xf7\x52\x4e\x9e\xa3\x52\x3a\x4f\x76\x85\xcf\x69\xe3\x22\xfe\x98\xf3\x9b\x35\xb8\xcb\x07\x6d\x88\x3f\xef\xff\x2d\xf3\xd7\x0c\xbc\xc3\x97\x57\xcd\xc0\x85\xe1\x97\x0b\xf2\x6f\x59\xf9\xf9\xcc\xfa\xdf\x2a\xe0\xf7\x0a\xf8\x66\x1c\xe6\x68\x92\x0d\x98\x7f\x63\x46\xfe\x6a\x01\xff\x80\xf9\xcd\x19\xfc\x7b\x8c\x99\x77\xfd\x47\x06\x56\x0c\xdc\xec\xff\x9d\x82\xfe\x7f\xce\xe9\xff\x42\x4e\xff\x3b\x05\xff\x33\xc7\x0c\x1e\x67\xf6\x5d\xc9\xf0\x93\xfb\xf1\x77\x00\x00\x00\xff\xff\x5f\x79\x11\xfd\xe8\x07\x00\x00")

func probeOBytes() ([]byte, error) {
	return bindataRead(
		_probeO,
		"probe.o",
	)
}

func probeO() (*asset, error) {
	bytes, err := probeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "probe.o", size: 2024, mode: os.FileMode(420), modTime: time.Unix(1592921460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"probe.o": probeO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"probe.o": &bintree{probeO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

